{
  "version": 3,
  "sources": ["../../../../../node_modules/@scullyio/ng-lib/fesm2015/scullyio-ng-lib.js"],
  "sourcesContent": ["import { __awaiter } from 'tslib';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, isDevMode, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { NavigationStart, GuardsCheckEnd, NavigationEnd } from '@angular/router';\nimport { BehaviorSubject, filter, switchMap, NEVER, of, tap, first, map, shareReplay, pluck, firstValueFrom, takeWhile, catchError, ReplaySubject, merge } from 'rxjs';\nimport * as i2 from '@angular/common/http';\nimport { HttpClientModule } from '@angular/common/http';\nconst _c0 = [\"*\"];\nconst ScullyDefaultSettings = {\n  useTransferState: true,\n  alwaysMonitor: false,\n  manualIdle: false,\n  baseURIForScullyContent: 'http://localhost:1668'\n};\nconst SCULLY_LIB_CONFIG = new InjectionToken('scullyLibConfig', {\n  factory: () => ScullyDefaultSettings\n});\n\n/**\n * Take a string, preferably resembling an URL, take out the search params, the anchors, and the ending slash\n * @param str\n */\nconst basePathOnly = str => {\n  if (str.includes('#')) {\n    str = str.split('#')[0];\n  }\n  if (str.includes('?')) {\n    str = str.split('?')[0];\n  }\n  const cleanedUpVersion = str.endsWith('/') ? str.slice(0, -1) : str;\n  return cleanedUpVersion;\n};\n\n// tslint:disable: no-string-literal\nconst isScullyRunning = () => window && window['ScullyIO'] === 'running';\nconst isScullyGenerated = () => window && window['ScullyIO'] === 'generated';\nfunction mergePaths(base, path) {\n  base = base !== null && base !== void 0 ? base : '';\n  if (base.endsWith('/') && path.startsWith('/')) {\n    return `${base}${path.substr(1)}`;\n  }\n  if (!base.endsWith('/') && !path.startsWith('/')) {\n    return `${base}/${path}`;\n  }\n  return `${base}${path}`;\n}\nconst SCULLY_SCRIPT_ID = `ScullyIO-transfer-state`;\nconst SCULLY_STATE_START = `/** ___SCULLY_STATE_START___ */`;\nconst SCULLY_STATE_END = `/** ___SCULLY_STATE_END___ */`;\nconst initialStateDone = '__done__with__Initial__navigation__';\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass TransferStateService {\n  constructor(document, router, http) {\n    this.document = document;\n    this.router = router;\n    this.http = http;\n    /** parse from index, or load from data.json, according to scullConfig setting */\n    this.inlineOnly = false;\n    /** set the currentBase to something that it can never be */\n    this.currentBaseUrl = '//';\n    /** subject to fire off incoming states */\n    this.stateBS = new BehaviorSubject({});\n    this.state$ = this.stateBS.pipe(filter(state => state !== undefined));\n    // emit the next url when routing is complete\n    this.nextUrl = this.router.events.pipe(filter(e => e instanceof NavigationStart), switchMap(e => {\n      if (basePathOnly(this.initialUrl) === basePathOnly(e.url)) {\n        /** don't kick off on initial load to prevent flicker */\n        this.initialUrl = initialStateDone;\n        return NEVER;\n      }\n      return of(e);\n    }), /** reset the state, so new components will never get stale data */\n    tap(() => this.stateBS.next(undefined)), /** prevent emitting before navigation to _this_ URL is done. */\n    switchMap(e => this.router.events.pipe(filter(ev => ev instanceof GuardsCheckEnd && ev.url === e.url), first())), map(ev => basePathOnly(ev.urlAfterRedirects || ev.url)), shareReplay(1));\n  }\n  startMonitoring() {\n    if (window && window['ScullyIO-injected'] && window['ScullyIO-injected'].inlineStateOnly) {\n      this.inlineOnly = true;\n    }\n    this.setupEnvForTransferState();\n    this.setupStartNavMonitoring();\n  }\n  setupEnvForTransferState() {\n    if (isScullyRunning()) {\n      this.injectScript();\n      // In Scully puppeteer\n      const exposed = window['ScullyIO-exposed'] || {};\n      if (exposed.transferState) {\n        this.stateBS.next(exposed.transferState);\n        this.saveState(exposed.transferState);\n      }\n    } else {\n      // On the client AFTER Scully rendered it. Also store the state in case the user comes from a non-scully page\n      this.initialUrl = window.location.pathname || '__no_NO_no__';\n      this.initialUrl = this.initialUrl !== '/' && this.initialUrl.endsWith('/') ? this.initialUrl.slice(0, -1) : this.initialUrl;\n      /** set the initial state */\n      if (isScullyGenerated()) {\n        /** only update the initial state when the page is Scully generated */\n        this.stateBS.next(window && window[SCULLY_SCRIPT_ID] || {});\n      }\n    }\n  }\n  injectScript() {\n    this.script = this.document.createElement('script');\n    this.script.setAttribute('id', SCULLY_SCRIPT_ID);\n    let last = this.document.body.lastChild;\n    while (last.previousSibling.nodeName === 'SCRIPT') {\n      last = last.previousSibling;\n    }\n    // console.log(`\n    // --------------------------------------------------\n    //    Welp! ${this.script}\n    // --------------------------------------------------\n    // `)\n    this.document.body.insertBefore(this.script, last);\n  }\n  /**\n   * Getstate will return an observable that containes the data.\n   * It does so right after the navigation for the page has finished.\n   * please note, this works SYNC on initial route, preventing a flash of content.\n   * @param name The name of the state to\n   */\n  getState(name) {\n    /** start of the fetch for the current active route. */\n    this.fetchTransferState();\n    return this.state$.pipe(pluck(name)\n    // tap((data) => console.log('tss', data))\n    );\n  }\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * (note the value it containes still can be undefined!)\n   */\n  stateHasKey(name) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name);\n  }\n  /**\n   * Read the current state, and see if it has an value for the name.\n   * ys also if there is actually an value in the state.\n   */\n  stateKeyHasValue(name) {\n    return this.stateBS.value && this.stateBS.value.hasOwnProperty(name) && this.stateBS.value[name] != null;\n  }\n  /**\n   * SetState will update the script in the generated page with data added.\n   * @param name\n   * @param val\n   */\n  setState(name, val) {\n    const newState = Object.assign(Object.assign({}, this.stateBS.value), {\n      [name]: val\n    });\n    this.stateBS.next(newState);\n    this.saveState(newState);\n  }\n  saveState(newState) {\n    if (isScullyRunning()) {\n      this.script.textContent = `{window['${SCULLY_SCRIPT_ID}']=_u(String.raw\\`${SCULLY_STATE_START}${escapeHtml(JSON.stringify(newState))}${SCULLY_STATE_END}\\`);function _u(t){t=t.split('${SCULLY_STATE_START}')[1].split('${SCULLY_STATE_END}')[0];const u={'_~b~': \"${'`'}\",'_~q~': \"'\",'_~o~': '$','_~s~': '/','_~l~': '<','_~g~': '>'};return JSON.parse(t.replace(/_~d~/g,'\\\\\\\\\"').replace(/_~[^]~/g, (s) => u[s]).replace(/\\\\n/g,'\\\\\\\\n').replace(/\\\\t/g,'\\\\\\\\t').replace(/\\\\r/g,'\\\\\\\\r'));}}`;\n    }\n  }\n  /**\n   * starts monitoring the router, and keep the url from the last completed navigation handy.\n   */\n  setupStartNavMonitoring() {\n    if (!isScullyGenerated()) {\n      return;\n    }\n    /** start monitoring the routes */\n    this.nextUrl.subscribe();\n  }\n  /**\n   * Wraps an observable into scully's transfer state. If data for the provided `name` is\n   * available in the state, it gets returned. Otherwise, the `originalState` observable will\n   * be returned.\n   *\n   * On subsequent calls, the data in the state will always be returned. The `originalState` will\n   * be returned only once.\n   *\n   * This is a convenience method which does not require you to use `getState`/`setState` manually.\n   *\n   * @param name state key\n   * @param originalState an observable which yields the desired data\n   */\n  useScullyTransferState(name, originalState) {\n    if (isScullyGenerated()) {\n      return this.getState(name);\n    }\n    return originalState.pipe(tap(state => this.setState(name, state)));\n  }\n  fetchTransferState() {\n    return __awaiter(this, void 0, void 0, function* () {\n      /** helper to read the part before the first slash (ignores leading slash) */\n      const base = url => url.split('/').filter(part => part.trim() !== '')[0];\n      /** put this in the next event cycle so the correct route can be read */\n      yield new Promise(r => setTimeout(r, 0));\n      /** get the current url */\n      const currentUrl = yield firstValueFrom(this.nextUrl);\n      const baseUrl = base(currentUrl);\n      if (this.currentBaseUrl === baseUrl) {\n        /** already monitoring, don't tho a thing */\n        return;\n      }\n      /** keep the baseUrl for later reference */\n      this.currentBaseUrl = baseUrl;\n      this.nextUrl.pipe( /** keep updating till we move to another route */\n      takeWhile(url => base(url) === this.currentBaseUrl),\n      // Get the next route's data from the the index or data file\n      switchMap(url => this.inlineOnly ? this.readFromIndex(url) : this.readFromJson(url)), catchError(e => {\n        // TODO: come up with better error text.\n        /** the developer needs to know, but its not fatal, so just return an empty state */\n        console.warn('Error while loading of parsing Scully state:', e);\n        return of({});\n      }), tap(newState => {\n        /** and activate the state in the components. on any error it will be empty */\n        this.stateBS.next(newState);\n      })).subscribe({\n        /** when completes (different URL) */\n        complete: () => {\n          /** reset the currentBaseUrl */\n          this.currentBaseUrl = '//';\n        }\n      });\n    });\n  }\n  readFromJson(url) {\n    return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/data.json'))));\n  }\n  readFromIndex(url) {\n    return firstValueFrom(this.http.get(dropPreSlash(mergePaths(url, '/index.html')), {\n      responseType: 'text'\n    })).then(html => {\n      const newStateStr = html.split(SCULLY_STATE_START)[1].split(SCULLY_STATE_END)[0];\n      return JSON.parse(unescapeHtml(newStateStr));\n    });\n  }\n}\n/** @nocollapse */\nTransferStateService.ɵfac = function TransferStateService_Factory(t) {\n  return new (t || TransferStateService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n/** @nocollapse */\nTransferStateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TransferStateService,\n  factory: TransferStateService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TransferStateService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.Router\n    }, {\n      type: i2.HttpClient\n    }];\n  }, null);\n})();\nfunction dropPreSlash(string) {\n  return string.startsWith('/') ? string.slice(1) : string;\n}\n/**\n * we need to escape our HTML to prevent XXS,\n * It needs to be custom, because the content can already contain html-escaped sequences\n **/\nfunction escapeHtml(text) {\n  const escapedText = {\n    \"'\": '_~q~',\n    $: '_~o~',\n    '`': '_~b~',\n    '/': '_~s~',\n    '<': '_~l~',\n    '>': '_~g~'\n  };\n  return text\n  /** escape the json */.replace(/[\\$`'<>\\/]/g, s => escapedText[s])\n  /** replace escaped double-quotes with single */.replace(/\\\\\\\"/g, `_~d~`);\n}\n/**\n * Unescape our custom escaped texts\n * @param text\n */\nfunction unescapeHtml(text) {\n  const unescapedText = {\n    '_~q~': \"'\",\n    '_~b~': '`',\n    '_~o~': '$',\n    '_~s~': '/',\n    '_~l~': '<',\n    '_~g~': '>'\n  };\n  return text\n  /** put back escaped double quotes to make valid json again */.replace(/_~d~/g, `\\\\\"`)\n  /** replace the custom escapes */.replace(/_~[^]~/g, s => unescapedText[s])\n  /** restore newlines+cr */.replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r');\n}\n\n// if (window) {\n//   window.addEventListener('AngularReady', ev => {\n//     console.log('appReady fired', ev);\n//   });\n// }\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass IdleMonitorService {\n  constructor(zone, router, conf, document, tss) {\n    this.zone = zone;\n    this.router = router;\n    this.document = document;\n    /** store the 'landing' url so we can skip it in idle-check. */\n    this.initialUrl = dropEndingSlash(window && window.location && window.location.pathname) || '';\n    this.imState = new BehaviorSubject({\n      idle: false,\n      timeOut: 5 * 1000 // 5 seconds timeout as default\n    });\n    this.idle$ = this.imState.pipe(pluck('idle'));\n    this.initApp = new Event('AngularInitialized', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.appReady = new Event('AngularReady', {\n      bubbles: true,\n      cancelable: false\n    });\n    this.appTimeout = new Event('AngularTimeout', {\n      bubbles: true,\n      cancelable: false\n    });\n    /** provide the default for missing conf paramter */\n    this.scullyLibConfig = Object.assign({}, ScullyDefaultSettings, conf);\n    const exposed = window['ScullyIO-exposed'] || {};\n    const manualIdle = !!exposed.manualIdle;\n    if (!this.scullyLibConfig.manualIdle && window && (this.scullyLibConfig.alwaysMonitor || isScullyRunning())) {\n      this.document.dispatchEvent(this.initApp);\n      this.router.events.pipe(filter(ev => ev instanceof NavigationEnd && ev.urlAfterRedirects !== undefined), /** don't check the page that has this setting. event is only importand on page load */\n      filter(ev => manualIdle ? ev.urlAfterRedirects !== this.initialUrl : true), tap(() => this.zoneIdleCheck())).subscribe();\n    }\n    if (this.scullyLibConfig.manualIdle) {\n      /** we still need the init event. */\n      this.document.dispatchEvent(this.initApp);\n    }\n    if (this.scullyLibConfig.useTransferState) {\n      /** don't start monitoring if people don't use the transferState */\n      tss.startMonitoring();\n    }\n  }\n  fireManualMyAppReadyEvent() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.document.dispatchEvent(this.appReady);\n    });\n  }\n  init() {\n    return firstValueFrom(this.idle$);\n  }\n  zoneIdleCheck() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (Zone === undefined) {\n        return this.simpleTimeout();\n      }\n      const taskTrackingZone = Zone.current.get('TaskTrackingZone');\n      if (taskTrackingZone === undefined) {\n        return this.simpleTimeout();\n      }\n      if (this.imState.value.idle) {\n        yield this.setState('idle', false);\n      }\n      /** run the actual check for 'idle' outsides zone, otherwise it will never come to an end. */\n      this.zone.runOutsideAngular(() => {\n        let tCancel;\n        let count = 0;\n        const startTime = Date.now();\n        const monitor = () => {\n          clearTimeout(tCancel);\n          // console.table(taskTrackingZone.macroTasks);\n          if (Date.now() - startTime > 30 * 1000) {\n            /** bail out after 30 seconds. */\n            this.document.dispatchEvent(this.appTimeout);\n            return;\n          }\n          if (taskTrackingZone.macroTasks.length > 0 && taskTrackingZone.macroTasks.find(z => z.source.includes('XMLHttpRequest')) !== undefined || count < 1 // make sure it runs at least once!\n          ) {\n            tCancel = setTimeout(() => {\n              count += 1;\n              monitor();\n            }, 50);\n            return;\n          }\n          this.zone.run(() => {\n            /** run this inside the zone, and give the app 250Ms to wrap up, before scraping starts */\n            setTimeout(() => {\n              this.document.dispatchEvent(this.appReady);\n              this.setState('idle', true);\n            }, 250);\n          });\n        };\n        monitor();\n      });\n    });\n  }\n  simpleTimeout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      /** zone not available, use a timeout instead. */\n      console.warn('Scully is using timeouts, add the needed polyfills instead!');\n      yield new Promise(r => setTimeout(r, this.imState.value.timeOut));\n      this.document.dispatchEvent(this.appReady);\n    });\n  }\n  setPupeteerTimeoutValue(milliseconds) {\n    this.imState.next(Object.assign(Object.assign({}, this.imState.value), {\n      timeOut: milliseconds\n    }));\n  }\n  setState(key, value) {\n    this.imState.next(Object.assign(Object.assign({}, this.imState.value), {\n      [key]: value\n    }));\n  }\n}\n/** @nocollapse */\nIdleMonitorService.ɵfac = function IdleMonitorService_Factory(t) {\n  return new (t || IdleMonitorService)(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.Router), i0.ɵɵinject(SCULLY_LIB_CONFIG), i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(TransferStateService));\n};\n/** @nocollapse */\nIdleMonitorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: IdleMonitorService,\n  factory: IdleMonitorService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(IdleMonitorService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i0.NgZone\n    }, {\n      type: i1.Router\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SCULLY_LIB_CONFIG]\n      }]\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: TransferStateService\n    }];\n  }, null);\n})();\nfunction dropEndingSlash(str) {\n  return str.endsWith('/') ? str.slice(0, -1) : str;\n}\nclass ScullyRoutesService {\n  constructor(router, http) {\n    this.router = router;\n    this.http = http;\n    this.refresh = new ReplaySubject(1);\n    /**\n     * An observable with all routes, published and unpublished alike\n     */\n    this.allRoutes$ = this.refresh.pipe(switchMap(() => this.http.get('assets/scully-routes.json')), catchError(() => {\n      console.warn('Scully routes file not found, are you running the Scully generated version of your site?');\n      return of([]);\n    }), /** filter out all non-array results */\n    filter(routes => Array.isArray(routes)), map(this.cleanDups), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * An observable with available routes (all published routes)\n     */\n    this.available$ = this.allRoutes$.pipe(map(list => list.filter(r => r.hasOwnProperty('published') ? r.published !== false : true)), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * an observable with all unpublished routes\n     */\n    this.unPublished$ = this.allRoutes$.pipe(map(list => list.filter(r => r.hasOwnProperty('published') ? r.published === false : false)), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /**\n     * An observable with the top-level off all published routes.\n     * (in an urls it would be `http://www.sample.org/__thisPart__/subroutes`)\n     */\n    this.topLevel$ = this.available$.pipe(map(routes => routes.filter(r => !r.route.slice(1).includes('/'))), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n    /** kick off first cycle */\n    this.reload();\n  }\n  /**\n   * returns an observable that returns the route information for the\n   * route currently selected. subscribes to route-events to update when needed\n   */\n  getCurrent() {\n    if (!location) {\n      /** probably not in a browser, no current location available */\n      return of();\n    }\n    /** fire off at start, and when navigation is done. */\n    return merge(of(new NavigationEnd(0, '', '')), this.router.events).pipe(filter(e => e instanceof NavigationEnd), switchMap(() => this.available$), map(list => {\n      const curLocation = basePathOnly(encodeURI(location.pathname).trim());\n      return list.find(r => curLocation === basePathOnly(r.route.trim()) || r.slugs && Array.isArray(r.slugs) && r.slugs.find(slug => curLocation.endsWith(basePathOnly(slug.trim()))));\n    }));\n  }\n  /**\n   * internal, as routes can have multiple slugs, and so occur multiple times\n   * this util function collapses all slugs back into 1 route.\n   */\n  cleanDups(routes) {\n    const m = new Map();\n    /** check for duplicates by comparing all, include route in comparison if its the only thing, or the only thing with only the tile  */\n    routes.forEach(r => m.set(JSON.stringify(Object.assign(Object.assign({}, r), {\n      route: hasOtherprops(r) ? '' : r.route\n    })), r));\n    return [...m.values()];\n  }\n  /** an utility that will force a reload of the `scully-routes.json` file */\n  reload() {\n    this.refresh.next();\n  }\n}\n/** @nocollapse */\nScullyRoutesService.ɵfac = function ScullyRoutesService_Factory(t) {\n  return new (t || ScullyRoutesService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient));\n};\n/** @nocollapse */\nScullyRoutesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ScullyRoutesService,\n  factory: ScullyRoutesService.ɵfac,\n  providedIn: 'root'\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyRoutesService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1.Router\n    }, {\n      type: i2.HttpClient\n    }];\n  }, null);\n})();\nfunction hasOtherprops(obj) {\n  const keys = Object.keys(obj);\n  if (keys.length === 1 && keys.includes('route')) {\n    return false;\n  }\n  if (keys.length === 2 && keys.includes('route') && keys.includes('title')) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns an array of nodes coninting all the html comments in the element.\n * When a searchText is given this is narrowed down to only comments that contian this text\n * @param rootElem Element to search nto\n * @param searchText optional string that needs to be in a HTML comment\n */\nfunction findComments(rootElem, searchText) {\n  const comments = [];\n  // Fourth argument, which is actually obsolete according to the DOM4 standard, seems required in IE 11\n  const iterator = document.createNodeIterator(rootElem, NodeFilter.SHOW_COMMENT, {\n    acceptNode: node => {\n      // Logic to determine whether to accept, reject or skip node\n      // In this case, only accept nodes that have content\n      // that is containing our searchText, by rejecting any other nodes.\n      if (searchText && node.nodeValue && !node.nodeValue.includes(searchText)) {\n        return NodeFilter.FILTER_REJECT;\n      }\n      return NodeFilter.FILTER_ACCEPT;\n    }\n  }\n  // , false // IE-11 support requires this parameter.\n  );\n  let curNode;\n  // tslint:disable-next-line: no-conditional-assignment\n  while (curNode = iterator.nextNode()) {\n    comments.push(curNode);\n  }\n  return comments;\n}\n\n/** this is needed, because otherwise the CLI borks while building */\nconst scullyBegin = '<!--scullyContent-begin-->';\nconst scullyEnd = '<!--scullyContent-end-->';\n/** use the module's closure to keep a system-wide check for the last handled URL. */\nlet lastHandled;\n// Adding this dynamic comment to suppress ngc error around Document as a DI token.\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n/** @dynamic */\nclass ScullyContentComponent {\n  constructor(elmRef, srs, router, location, http, document, conf) {\n    this.elmRef = elmRef;\n    this.srs = srs;\n    this.router = router;\n    this.location = location;\n    this.http = http;\n    this.document = document;\n    this.conf = conf;\n    this.baseUrl = this.conf.useTransferState || ScullyDefaultSettings.useTransferState;\n    this.elm = this.elmRef.nativeElement;\n    /** pull in all  available routes into an eager promise */\n    this.routes = firstValueFrom(this.srs.allRoutes$);\n    /** monitor the router, so we can update while navigating in the same 'page' see #311 */\n    this.routeUpdates$ = this.router.events.pipe(filter(ev => ev instanceof NavigationEnd), /** don't replace if we are already there */\n    filter(ev => lastHandled && !lastHandled.endsWith(basePathOnly(ev.urlAfterRedirects))), tap(r => this.replaceContent()));\n    this.routeSub = this.routeUpdates$.subscribe();\n    /** do this from constructor, so it runs ASAP */\n  }\n  ngOnInit() {\n    if (this.elm) {\n      /** this will only fire in a browser environment */\n      this.handlePage();\n    }\n  }\n  /**\n   * Loads the static content from scully into the view\n   * Will fetch the content from sibling links with xmlHTTPrequest\n   */\n  handlePage() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const curPage = basePathOnly(location.href);\n      if (lastHandled === curPage) {\n        /**\n         * Due to the fix we needed for #311\n         * it might happen that this routine is called\n         * twice for the same page.\n         * this code will make sure the second one is ignored.\n         */\n        return;\n      }\n      lastHandled = curPage;\n      const template = this.document.createElement('template');\n      const currentCssId = this.getCSSId(this.elm);\n      if (window.scullyContent) {\n        /** upgrade existing static content */\n        const htmlString = window.scullyContent.html;\n        if (currentCssId !== window.scullyContent.cssId) {\n          /** replace the angular cssId */\n          template.innerHTML = htmlString.split(window.scullyContent.cssId).join(currentCssId);\n        } else {\n          template.innerHTML = htmlString;\n        }\n      } else {\n        /**\n         *   NOTE\n         * when updateting the texts for the errors, make sure you leave the\n         *  `id=\"___scully-parsing-error___\"`\n         * in there. That way users can detect rendering errors in their CI\n         * on a reliable way.\n         */\n        if (isScullyRunning()) {\n          /**\n           * we don't need to fetch the content, as it is already in the window\n           */\n          return;\n        }\n        yield firstValueFrom(this.http.get(curPage + '/index.html', {\n          responseType: 'text'\n        })).catch(e => {\n          if (isDevMode()) {\n            /** in devmode (usually in `ng serve`) check the scully server for the content too */\n            const uri = new URL(location.href);\n            const url = `${this.conf.baseURIForScullyContent}/${basePathOnly(uri.pathname)}/index.html`;\n            return firstValueFrom(this.http.get(url, {\n              responseType: 'text'\n            }));\n          } else {\n            return Promise.reject(e);\n          }\n        }).then(html => {\n          try {\n            const htmlString = html.split(scullyBegin)[1].split(scullyEnd)[0];\n            if (htmlString.includes('_ngcontent')) {\n              /** update the angular cssId */\n              const atr = '_ngcontent' + htmlString.split('_ngcontent')[1].split('=')[0];\n              template.innerHTML = htmlString.split(atr).join(currentCssId);\n            } else {\n              template.innerHTML = htmlString;\n            }\n          } catch (e) {\n            template.innerHTML = `<h2 id=\"___scully-parsing-error___\">Sorry, could not parse static page content</h2>\n            <p>This might happen if you are not using the static generated pages.</p>`;\n          }\n        }).catch(e => {\n          template.innerHTML = '<h2 id=\"___scully-parsing-error___\">Sorry, could not load static page content</h2>';\n          console.error('problem during loading static scully content', e);\n        });\n      }\n      /** insert the whole thing just before the `<scully-content>` element */\n      const parent = this.elm.parentElement || this.document.body;\n      const begin = this.document.createComment('scullyContent-begin');\n      const end = this.document.createComment('scullyContent-end');\n      parent.insertBefore(begin, this.elm);\n      parent.insertBefore(template.content, this.elm);\n      parent.insertBefore(end, this.elm);\n      /** upgrade all hrefs to simulated routelinks (in next microtask) */\n      setTimeout(() => this.document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this)), 10);\n      // document.querySelectorAll('[href]').forEach(this.upgradeToRoutelink.bind(this));\n    });\n  }\n  /**\n   * upgrade a **href** attributes to links that respect the Angular router\n   * and don't do a full page reload. Only works on links that are found in the\n   * Scully route config file.\n   * @param elm the element containing the **hrefs**\n   */\n  upgradeToRoutelink(elm) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!['A', 'BUTTON'].includes(elm.tagName)) {\n        return;\n      }\n      const hash = (_a = elm.dataset) === null || _a === void 0 ? void 0 : _a.hash;\n      if (hash) {\n        elm.setAttribute('href', '#' + hash);\n        elm.setAttribute('onclick', '');\n        elm.onclick = ev => {\n          ev.preventDefault();\n          const destination = document.getElementById(hash);\n          if (destination) {\n            const url = new URL(window.location.href);\n            url.hash = hash;\n            history.replaceState('', '', url.toString());\n            destination.scrollIntoView();\n          }\n        };\n        return;\n      }\n      const routes = yield this.routes;\n      const href = elm.getAttribute('href');\n      const lnk = basePathOnly(href.toLowerCase());\n      const route = routes.find(r => basePathOnly(r.route.toLowerCase()) === lnk);\n      /** only upgrade routes known by scully. */\n      if (lnk && route && !lnk.startsWith('#')) {\n        elm.onclick = ev => __awaiter(this, void 0, void 0, function* () {\n          const splitRoute = route.route.split(`/`);\n          const curSplit = location.pathname.split('/');\n          // loose last \"part\" of route\n          curSplit.pop();\n          ev.preventDefault();\n          const routed = yield this.router.navigate(splitRoute).catch(e => {\n            console.error('routing error', e);\n            return false;\n          });\n          if (!routed) {\n            return;\n          }\n          /** check for the same route with different \"data\", and NOT a 1 level higher (length), and is not a fragment of th same page */\n          if (curSplit.every((part, i) => splitRoute[i] === part) && splitRoute.length !== curSplit.length + 1) {\n            setTimeout(() => this.replaceContent(), 10); // a small delay, so we are sure the angular parts in the page are settled enough\n          }\n        });\n      }\n    });\n  }\n  replaceContent() {\n    /**\n     * as Angular doesn't destroy the component if we stay on the same page,\n     * we have to manually delete old content. Also we need to kick of loading\n     * the new content. handlePage() takes care of that.\n     */\n    /** delete the content, as it is now out of date! */\n    window.scullyContent = undefined;\n    const parent = this.elm.parentElement;\n    let cur = findComments(parent, 'scullyContent-begin')[0];\n    while (cur && cur !== this.elm) {\n      const next = cur.nextSibling;\n      parent.removeChild(cur);\n      cur = next;\n    }\n    this.handlePage();\n  }\n  getCSSId(elm) {\n    return elm.getAttributeNames().find(a => a.startsWith('_ngcontent')) || '';\n  }\n  ngOnDestroy() {\n    this.routeSub.unsubscribe();\n    /** reset the lastused */\n    lastHandled = '//';\n  }\n}\n/** @nocollapse */\nScullyContentComponent.ɵfac = function ScullyContentComponent_Factory(t) {\n  return new (t || ScullyContentComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(ScullyRoutesService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.Location), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(SCULLY_LIB_CONFIG));\n};\n/** @nocollapse */\nScullyContentComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ScullyContentComponent,\n  selectors: [[\"scully-content\"]],\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function ScullyContentComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  styles: [\"\\n      :host {\\n        display: none;\\n      }\\n      scully-content {\\n        display: none;\\n      }\\n    \"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyContentComponent, [{\n    type: Component,\n    args: [{\n      // tslint:disable-next-line: component-selector\n      selector: 'scully-content',\n      template: '<ng-content></ng-content>',\n      styles: [`\n      :host {\n        display: none;\n      }\n      scully-content {\n        display: none;\n      }\n    `],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      preserveWhitespaces: true\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: ScullyRoutesService\n    }, {\n      type: i1.Router\n    }, {\n      type: i3.Location\n    }, {\n      type: i2.HttpClient\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SCULLY_LIB_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nclass ScullyContentModule {}\n/** @nocollapse */\nScullyContentModule.ɵfac = function ScullyContentModule_Factory(t) {\n  return new (t || ScullyContentModule)();\n};\n/** @nocollapse */\nScullyContentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScullyContentModule,\n  declarations: [ScullyContentComponent],\n  exports: [ScullyContentComponent]\n});\n/** @nocollapse */\nScullyContentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyContentModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ScullyContentComponent],\n      exports: [ScullyContentComponent]\n    }]\n  }], null, null);\n})();\nclass ScullyLibModule {\n  constructor(idle) {\n    this.idle = idle;\n  }\n  /**\n   * We use a little trick to get a working idle-service.\n   * First, we separate out the component in a separate module to prevent a circulair injection\n   * second we create a constuctor that activates the IdleMonitorService. as that is provided for 'root'\n   * there will be only 1 instance in our app.\n   */\n  static forRoot(config = ScullyDefaultSettings) {\n    config = Object.assign({}, ScullyDefaultSettings, config);\n    return {\n      ngModule: ScullyLibModule,\n      providers: [{\n        provide: SCULLY_LIB_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n}\n/** @nocollapse */\nScullyLibModule.ɵfac = function ScullyLibModule_Factory(t) {\n  return new (t || ScullyLibModule)(i0.ɵɵinject(IdleMonitorService));\n};\n/** @nocollapse */\nScullyLibModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ScullyLibModule,\n  imports: [ScullyContentModule, HttpClientModule],\n  exports: [ScullyContentModule]\n});\n/** @nocollapse */\nScullyLibModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[ScullyContentModule, HttpClientModule], ScullyContentModule]\n});\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ScullyLibModule, [{\n    type: NgModule,\n    args: [{\n      imports: [ScullyContentModule, HttpClientModule],\n      exports: [ScullyContentModule]\n    }]\n  }], function () {\n    return [{\n      type: IdleMonitorService\n    }];\n  }, null);\n})();\n\n/*\n * Public API Surface of ng-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { IdleMonitorService, ScullyContentComponent, ScullyContentModule, ScullyLibModule, ScullyRoutesService, TransferStateService, dropEndingSlash, isScullyGenerated, isScullyRunning };\n"],
  "mappings": "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",
  "names": ["document", "location"]
}
